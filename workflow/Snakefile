configfile: "config/config.yaml"

ruleorder: pipeline_entry > parcellation

mouses 		= config["branch_opts"]["mouses"]
dates		= config["branch_opts"]["dates"]
parcellations	= config["branch_opts"]["parcellations"]
filters		= config["branch_opts"]["filters"]

sides		= config["conditional_opts"]["sides"]
modalities	= config["conditional_opts"]["modalities"]

conditions	= [ f"{side}_{modal}"
			for side in sides for modal in modalities]
condition_dicts	= { f"{side}_{modal}" : {"modality" : m, "target_side_left" : s}
			for s,side in enumerate(sides) for m,modal in enumerate(modalities)}

features	= config["features"]

decoders	= config["decode_opts"]["decoders"]
k_folds 	= config["decode_opts"]["k_folds"]

wildcard_constraints:
	mouse		= r"[a-zA-Z\d_]+",
	parcellation	= r"[a-zA-Z\d_]+",
	filter		= r"[a-zA-Z\d_]+",
	cond		= r"[a-zA-Z\d_]+",
	feature		= r"[a-zA-Z\d_]+",
	decoder		= r"[a-zA-Z\d_]+",



###   Output accumulation rules   ###

# The first rule is default
rule all:
	input:
		[f"results/{mouse}/{parcellation}/{filter}/decoder/performances.png"
			   for mouse in mouses
			   for parcellation in parcellations
			   for filter in filters],
		[ f"results/{mouse}/{parcellation}/{filter}/decoder/{feature}/plots/performance.png"
					for mouse in mouses
					for parcellation in parcellations
					for filter in filters
					for cond in conditions
					for feature in features],

rule all_plots:
	input:
		 [ f"results/{mouse}/{parcellation}/{filter}/decoder/{feature}/plots/performance.png"
			   for mouse in mouses
			   for parcellation in parcellations
			   for filter in filters
			   for cond in conditions
			   for feature in features]

rule all_decode:
	input:
		[ f"results/{mouse}/{parcellation}/{filter}/decoder/{feature}/{decoder}/decoder_model.pkl"
				for mouse in mouses
				for parcellation in parcellations
				for filter in filters
				for cond in conditions
				for feature in features
				for decoder in decoders]

rule all_features:
	input:
		[ f"results/{mouse}/{parcellation}/{filter}/{cond}/{feature}/feature_data.h5"
				for mouse in mouses
				for parcellation in parcellations
				for filter in filters
				for cond in conditions
				for feature in features ]



###   Data processing   ###

rule pipeline_entry:
	input:
		tasks	= [ f"resources/experiment/{{mouse}}/{date}/task_data/"
				for date in dates ],
		Vc	= [ f"resources/experiment/{{mouse}}/{date}/SVD_data/Vc.mat"
				for date in dates ],
		trans_params = [ f"resources/experiment/{{mouse}}/{date}/SVD_data/opts.mat"
				  for date in dates ],
	output:
		"results/{mouse}/SVD/data.h5",
		config = "results/{mouse}/SVD/conf.yaml",
	log:
		"results/{mouse}/SVD/pipeline_entry.log"
	conda:
		"envs/environment.yaml"
	resources:
		memb_mb=1000
	script:
		"scripts/default_entry.py"

def parcellation_input(wildcards):
	input = {
		"data"	: "results/{mouse}/SVD/data.h5",
		"config": "results/{mouse}/SVD/conf.yaml" }
	input["meta"]	= config["parcellation_opts"]["paths"][wildcards["parcellation"]]
	return input

rule parcellation:
	input:
		unpack(parcellation_input)
	output:
		"results/{mouse}/{parcellation}/data.h5",
		config = "results/{mouse}/{parcellation}/conf.yaml",
	wildcard_constraints:
		parcellation = "(?!SVD).+"
	log:
		"results/{mouse}/{parcellation}/parcellation.log"
	conda:
		"envs/environment.yaml"
	resources:
		memb_mb=1000
	script:
		"scripts/parcellation.py"

rule prefilters:
	input:
		"results/{mouse}/{parcellation}/data.h5",
		config = "results/{mouse}/{parcellation}/conf.yaml",
	output:
		"results/{mouse}/{parcellation}/{filter}/filtered_data.h5",
		config = "results/{mouse}/{parcellation}/{filter}/conf.yaml",
	log:
		"results/{mouse}/{parcellation}/{filter}/prefilters.log"
	conda:
		"envs/environment.yaml"
	resources:
		memb_mb=1000
	script:
		"scripts/prefilter.py"

rule conditions:
	input:
		"results/{mouse}/{parcellation}/{filter}/filtered_data.h5",
		config = "results/{mouse}/{parcellation}/{filter}/conf.yaml",
	output:
		"results/{mouse}/{parcellation}/{filter}/{cond}/conditional_data.h5",
		config = "results/{mouse}/{parcellation}/{filter}/{cond}/conf.yaml",
	params:
		conditions = lambda wildcards : [condition_dicts[wildcards["cond"]]]
	log:
		"results/{mouse}/{parcellation}/{filter}/{cond}/conditionals.log"
	conda:
		"envs/environment.yaml"
	resources:
		memb_mb=1000
	script:
		"scripts/conditional.py"

rule feature_calculation:
	input:
		"results/{mouse}/{parcellation}/{filter}/{cond}/conditional_data.h5",
		config = "results/{mouse}/{parcellation}/{filter}/{cond}/conf.yaml",
	output:
		"results/{mouse}/{parcellation}/{filter}/{cond}/{feature}/feature_data.h5",
		config = "results/{mouse}/{parcellation}/{filter}/{cond}/{feature}/conf.yaml",
	log:
		"results/{mouse}/{parcellation}/{filter}/{cond}/{feature}/feature_calculation.log"
	conda:
		"envs/environment.yaml"
	resources:
		memb_mb=1000
	script:
		"scripts/feature.py"

rule decoding:
	input:
		[f"results/{{mouse}}/{{parcellation}}/{{filter}}/{cond}/{{feature}}/feature_data.h5" for cond in conditions],
	output:
		"results/{mouse}/{parcellation}/{filter}/decoder/{feature}/{decoder}/decoder_model.pkl",
		"results/{mouse}/{parcellation}/{filter}/decoder/{feature}/{decoder}/decoder_perf.pkl",
		config = "results/{mouse}/{parcellation}/{filter}/decoder/{feature}/{decoder}/conf.yaml",
	params:
		conds = conditions,
		reps = k_folds,
	log:
	   "results/{mouse}/{parcellation}/{filter}/decoder/{feature}/{decoder}/decoding.log",
	conda:
		"envs/environment.yaml"
	resources:
		memb_mb=1000
	script:
		"scripts/decoding.py"



###   Plotting   ###

rule plot_performance:
	input:
		[f"results/{{mouse}}/{{parcellation}}/{{filter}}/decoder/{{feature}}/{decoder}/decoder_perf.pkl" for decoder in decoders],
	output:
		"results/{mouse}/{parcellation}/{filter}/decoder/{feature}/plots/performance.png",
		"results/{mouse}/{parcellation}/{filter}/decoder/{feature}/plots/performance.pkl",
	params:
		conds=conditions,
		decoders=decoders,
	log:
		"results/{mouse}/{parcellation}/{filter}/decoder/{feature}/plots/plot_performance.log",
	conda:
		 "envs/environment.yaml"
	script:
		  "scripts/plot_performance.py"

rule plot_performances:
	input:
		[f"results/{{mouse}}/{{parcellation}}/{{filter}}/decoder/{feature}/{decoder}/decoder_perf.pkl"
				for feature in features
				for decoder in decoders],
	output:
		"results/{mouse}/{parcellation}/{filter}/decoder/performances.png",
	params:
		conds=conditions,
		decoders=decoders,
		features=features,
	log:
		"results/{mouse}/{parcellation}/{filter}/decoder/plot_performances.log",
	conda:
		 "envs/environment.yaml"
	script:
		  "scripts/plot_performances.py"



rule debug:
	input:
		tasks	= [ f"resources/experiment/{mouse}/{date}/task_data/"
				for date in dates for mouse in mouses ],
	conda:
		"envs/environment.yaml"
	log:
		"results/debug.log"
	script:
		"scripts/debug_snakemake.py"



###   legacy tests   ###

rule test_data:
	input:
		"results/GN06/SVD/data.h5"
	log:
		"results/GN06/SVD/test_data.log"
	conda:
		"envs/environment.yaml"
	script:
		"code/test_data.py"

rule test_analysis:
	input:
		"results/GN06/SVD/data.h5"
	log:
		"results/GN06/SVD/test_analysis.log"
	conda:
		"envs/environment.yaml"
	script:
		"code/test_analysis.py"
